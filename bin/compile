#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3

bp_dir=$(cd $(dirname $0); cd ..; pwd)

# clean up leaking environment
unset GIT_DIR

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

source "$build_dir/_webassets.cfg"

# Default Configurations -----------------------
HTML_COMPRESSOR_OPTIONS="--recursive --simple-bool-attr --preserve-server-script --compress-css --compress-js --js-compressor closure -o"
EXCLUDE_DIRS="\..*|_.*|bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist|tmp|node_modules|bin|plugins|libs|components"
EXCLUDE_DIRS="--ignore-file=(^|/)(${EXCLUDE_DIRS})($|/)"

# Dependencies Installation --------------------
if [[ ! $NO_GRUNT || ( ! $GRUNT_ONLY && ( ! $NO_BOWER || ( ! $NO_CSS && ( ! $NO_LESS || ! $NO_STYLUS || ! $NO_RECESS ) ) || ( ! $NO_JS && ( ! $NO_JS_IMPORTER || ! $NO_CS_IMPORT || ! $NO_REQUIREJS ) ) || ( ! $NO_HTML && ( ! $NO_JADE ) ) ) ) ]]; then

  # Node Installation --------------------------
  status "Installing Node and build dependencies..."
  mv $bp_dir/vendor/package-webassets.json $NODE_BUILD_DIR/package.json
  if [[ ! $NO_GRUNT ]]; then
    (echo ","; echo -n "    \"grunt\": \"latest\"") >> $NODE_BUILD_DIR/package.json
  fi
  if [[ ! $GRUNT_ONLY ]]; then
    if [[ ! $NO_BOWER ]]; then
      (echo ","; echo -n "    \"bower\": \"latest\"") >> $NODE_BUILD_DIR/package.json
    fi
    if [[ ! $NO_CSS ]]; then
      if [[ ! $NO_LESS ]]; then
        (echo ","; echo -n "    \"grunt-contrib-less\": \"latest\"") >> $NODE_BUILD_DIR/package.json
      fi
      if [[ ! $NO_SASS ]]; then
        if [[ condition ]]; then
          (echo ","; echo -n "    \"grunt-contrib-compass\": \"latest\"") >> $NODE_BUILD_DIR/package.json
        fi
      fi
      if [[ ! $NO_STYLUS ]]; then
        (echo ","; echo -n "    \"grunt-contrib-stylus\": \"latest\"") >> $NODE_BUILD_DIR/package.json
      fi
      if [[ ! $NO_BLESS ]]; then
        (echo ","; echo -n "    \"grunt-bless\": \"latest\"") >> $NODE_BUILD_DIR/package.json
      fi
      if [[ ! $NO_RECESS ]]; then
        (echo ","; echo -n "    \"grunt-recess\": \"latest\"") >> $NODE_BUILD_DIR/package.json
      fi
    fi
    if [[ ! $NO_JS ]]; then
      if [[ ! $NO_JS_IMPORTER || ! $NO_CS_IMPORT ]]; then
        (echo ","; echo -n "    \"importer\": \"latest\"") >> $NODE_BUILD_DIR/package.json
      fi
      if [[ ! $NO_REQUIREJS ]]; then
        (echo ","; echo -n "    \"requirejs\": \"latest\"") >> $NODE_BUILD_DIR/package.json
      fi
    fi
    if [[ ! $NO_HTML ]]; then
      if [[ ! $NO_JADE ]]; then
        (echo ","; echo -n "    \"jade\": \"latest\"") >> $NODE_BUILD_DIR/package.json
      fi
    fi
    if [[ ! $NO_GRUNT ]]; then
      (echo ","; echo -n "    \"grunt-cli\": \"latest\"") >> $NODE_BUILD_DIR/package.json
    fi
  fi
  (echo ""; echo "  }"; echo "}") >> $NODE_BUILD_DIR/package.json

  NODE_BUILDPACK_DIR=$(mktemp -d -t node.XXXXXX)
  NODE_BUILD_DIR=$(mktemp -d -t node_build.XXXXXX)
  git clone --quiet https://github.com/heroku/heroku-buildpack-nodejs.git $NODE_BUILDPACK_DIR
  chmod -f +x $NODE_BUILDPACK_DIR/bin/{detect,compile,release} || true
  $NODE_BUILDPACK_DIR/bin/compile $NODE_BUILD_DIR $cache_dir
  export PATH=$NODE_BUILD_DIR/vendor/node/bin:$NODE_BUILD_DIR/bin:$NODE_BUILD_DIR/node_modules/.bin:$PATH
  echo "done." | indent

  if [[ ! $GRUNT_ONLY ]]; then

    RUBY_BUILD_DIR=$(mktemp -d -t ruby_build.XXXXXX)

    if [[ ! $NO_CSS ]]; then
      if [[ ! $NO_SASS ]]; then
        # SASS & Compass Installation ----------------
        status "Installing SASS..."
        mkdir -p $RUBY_BUILD_DIR/.gem
        gem install sass --no-rdoc --no-ri --install-dir $RUBY_BUILD_DIR/.gem | indent
        echo "done." | indent
        if [ -f "$build_dir/config.rb" ]; then
          status "Installing Compass..."
          gem install compass --no-rdoc --no-ri --install-dir $RUBY_BUILD_DIR/.gem | indent
          echo "done." | indent
        fi
        # Bourbon Installation -----------------------
        if [[ ! $NO_BOURBON ]]; then
          status "Installing Bourbon..."
          # gem install bourbon --no-rdoc --no-ri --install-dir $RUBY_BUILD_DIR/.gem | indent
          echo "done." | indent
        fi
      fi
    fi

    if [[ ! $NO_HTML ]]; then
      if [[ ! $NO_HAML ]]; then
        status "Installing Haml..."
        gem install haml --no-rdoc --no-ri --install-dir $RUBY_BUILD_DIR/.gem | indent
        echo "done." | indent
      fi
      if [[ ! $NO_SLIM ]]; then
        status "Installing Slim..."
        gem install slim --no-rdoc --no-ri --install-dir $RUBY_BUILD_DIR/.gem | indent
        echo "done." | indent
      fi
    fi
    export GEM_PATH=$RUBY_BUILD_DIR/.gem:$GEM_PATH

    if [[ ! $NO_CLOSURE_COMPILE || ! $NO_HTML_COMPRESSION  ]]; then
      # Closure Compiler Fetch -----------------
      echo -n "-----> Fetching Closure Compiler... "
      curl --silent --location http://closure-compiler.googlecode.com/files/compiler-latest.tar.gz | tar xz -C $bp_dir/vendor/
      echo "done"
    fi
  fi
fi


if [[ ! $GRUNT_ONLY ]]; then

  if [[ ! $NO_SOURCE_MAP ]]; then
    cs_sm_optn="--map"
    importer_sm_optn="--source-map"
  fi

  # Bower --------------------------------------
  if [[ ! $NO_BOWER && -f $build_dir/component.json ]]; then
    status "Installing components using Bower..."
    eval bower install $BOWER_OPTIONS | indent
    echo "done." | indent
  fi
fi

# Grunt Tasks --------------------------------
if [[ $USE_GRUNT ]]; then
  cd $build_dir
  grunt $GRUNT_OPTIONS heroku
fi

if [[ $USE_STATIC_SERVER ]]; then
  status "Initializing Static Server..."
  STATIC_BUILDPACK_DIR=$(mktemp -d -t node.XXXXXX)
  git clone --quiet https://github.com/abhishekmunie/heroku-buildpack-static.git $STATIC_BUILDPACK_DIR
  chmod -f +x $STATIC_BUILDPACK_DIR/bin/{detect,compile,release} || true
  $STATIC_BUILDPACK_DIR/bin/compile $build_dir $cache_dir
  rm -fr $STATIC_BUILDPACK_DIR
fi

# Cleanup ------------------------------------
rm -fr $NODE_BUILDPACK_DIR
rm -fr $NODE_BUILD_DIR
rm -fr $STATIC_BUILDPACK_DIR

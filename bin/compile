#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3

bp_dir=$(cd $(dirname $0); cd ..; pwd)

# clean up leaking environment
unset GIT_DIR

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

source "$build_dir/_webassets.cfg"

# Default Configurations -----------------------
HTML_COMPRESSOR_OPTIONS="--recursive --simple-bool-attr --preserve-server-script --compress-css --compress-js --js-compressor closure -o"
EXCLUDE_DIRS="\..*|_.*|bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist|tmp|node_modules|bin|plugins|libs|components"
EXCLUDE_DIRS="--ignore-file=(^|/)(${EXCLUDE_DIRS})($|/)"

# Dependencies Installation --------------------
if [[ ! $NO_GRUNT || ( ! $GRUNT_ONLY && ( ! $NO_BOWER || ( ! $NO_CSS && ( ! $NO_LESS || ! $NO_STYLUS || ! $NO_RECESS ) ) || ( ! $NO_JS && ( ! $NO_JS_IMPORTER || ! $NO_CS_IMPORT || ! $NO_REQUIREJS ) ) || ( ! $NO_HTML && ( ! $NO_JADE ) ) ) ) ]]; then

  # Node Installation --------------------------
  status "Installing Node and build dependencies..."
  NODE_BUILDPACK_DIR=$(mktemp -d -t node.XXXXXX)
  NODE_BUILD_DIR=$(mktemp -d -t node_build.XXXXXX)
  git clone --quiet https://github.com/heroku/heroku-buildpack-nodejs.git $NODE_BUILDPACK_DIR
  chmod -f +x $NODE_BUILDPACK_DIR/bin/{detect,compile,release} || true
  mv $bp_dir/vendor/package-webassets.json $NODE_BUILD_DIR/package.json
  if [[ ! $NO_GRUNT ]]; then
    (echo ","; echo -n "    \"grunt\":             \"latest\"") >> $NODE_BUILD_DIR/package.json
  fi
  if [[ ! $GRUNT_ONLY ]]; then
    if [[ ! $NO_BOWER ]]; then
      (echo ","; echo -n "    \"bower\":             \"latest\"") >> $NODE_BUILD_DIR/package.json
    fi
    if [[ ! $NO_CSS ]]; then
      if [[ ! $NO_LESS ]]; then
        (echo ","; echo -n "    \"less\":              \"latest\"") >> $NODE_BUILD_DIR/package.json
      fi
      if [[ ! $NO_STYLUS ]]; then
        (echo ","; echo -n "    \"stylus\":            \"latest\"") >> $NODE_BUILD_DIR/package.json
      fi
      if [[ ! $NO_BLESS ]]; then
        (echo ","; echo -n "    \"bless\":             \"latest\"") >> $NODE_BUILD_DIR/package.json
      fi
      if [[ ! $NO_RECESS ]]; then
        (echo ","; echo -n "    \"recess\":            \"latest\"") >> $NODE_BUILD_DIR/package.json
      fi
    fi
    if [[ ! $NO_JS ]]; then
      if [[ ! $NO_JS_IMPORTER || ! $NO_CS_IMPORT ]]; then
        (echo ","; echo -n "    \"importer\":          \"latest\"") >> $NODE_BUILD_DIR/package.json
      fi
      if [[ ! $NO_REQUIREJS ]]; then
        (echo ","; echo -n "    \"requirejs\":         \"latest\"") >> $NODE_BUILD_DIR/package.json
      fi
    fi
    if [[ ! $NO_HTML ]]; then
      if [[ ! $NO_JADE ]]; then
        (echo ","; echo -n "    \"jade\":              \"latest\"") >> $NODE_BUILD_DIR/package.json
      fi
    fi
    if [[ ! $NO_GRUNT ]]; then
      (echo ","; echo -n "    \"grunt-cli\":         \"latest\"") >> $NODE_BUILD_DIR/package.json
    fi
  fi
  (echo ""; echo "  }"; echo -n "}") >> $NODE_BUILD_DIR/package.json
  $NODE_BUILDPACK_DIR/bin/compile $NODE_BUILD_DIR $cache_dir
  echo "done." | indent

  export PATH=$NODE_BUILD_DIR/bin:$NODE_BUILD_DIR/node_modules/.bin:$PATH

  if [[ ! $GRUNT_ONLY ]]; then
    # Ack! Installation ----------------------------
    echo -n "-----> Installing Ack!(http://betterthangrep.com)... "
    curl --silent http://beyondgrep.com/ack-2.12-single-file > ~/bin/ack && chmod 0755 ~/bin/ack
    export PATH=~/bin:$PATH
    (echo "--type-set=less=.less"; echo "--type-set=stylus=.styl"; echo "--type-set=sass=.sass"; echo "--type-set=scss=.scss"; echo "--type-set=coffee=.coffee"; echo "--type-set=jade=.jade"; echo "--type-set=haml=.haml") > ~/.ackrc
    echo "done"

    RUBY_BUILD_DIR=$(mktemp -d -t ruby_build.XXXXXX)

    if [[ ! $NO_CSS ]]; then
      if [[ ! $NO_SASS ]]; then
        # SASS & Compass Installation ----------------
        status "Installing SASS..."
        mkdir -p $RUBY_BUILD_DIR/.gem
        gem install sass --no-rdoc --no-ri --install-dir $RUBY_BUILD_DIR/.gem | indent
        echo "done." | indent
        if [ -f "$build_dir/config.rb" ]; then
          status "Installing Compass..."
          gem install compass --no-rdoc --no-ri --install-dir $RUBY_BUILD_DIR/.gem | indent
          echo "done." | indent
        fi
        # Bourbon Installation -----------------------
        if [[ ! $NO_BOURBON ]]; then
          status "Installing Bourbon..."
          # gem install bourbon --no-rdoc --no-ri --install-dir $RUBY_BUILD_DIR/.gem | indent
          echo "done." | indent
        fi
      fi
    fi

    if [[ ! $NO_HTML ]]; then
      if [[ ! $NO_HAML ]]; then
        status "Installing Haml..."
        gem install haml --no-rdoc --no-ri --install-dir $RUBY_BUILD_DIR/.gem | indent
        echo "done." | indent
      fi
      if [[ ! $NO_SLIM ]]; then
        status "Installing Slim..."
        gem install slim --no-rdoc --no-ri --install-dir $RUBY_BUILD_DIR/.gem | indent
        echo "done." | indent
      fi
    fi
    export GEM_PATH=$RUBY_BUILD_DIR/.gem:$GEM_PATH

    if [[ ! $NO_CLOSURE_COMPILE || ! $NO_HTML_COMPRESSION  ]]; then
      # Closure Compiler Fetch -----------------
      echo -n "-----> Fetching Closure Compiler... "
      curl --silent --location http://closure-compiler.googlecode.com/files/compiler-latest.tar.gz | tar xz -C $bp_dir/vendor/
      echo "done"
    fi
  fi
fi


if [[ ! $GRUNT_ONLY ]]; then

  if [[ ! $NO_SOURCE_MAP ]]; then
    cs_sm_optn="--map"
    importer_sm_optn="--source-map"
  fi

  # Bower --------------------------------------
  if [[ ! $NO_BOWER && -f $build_dir/component.json ]]; then
    status "Installing components using Bower..."
    eval bower install $BOWER_OPTIONS | indent
    echo "done." | indent
  fi

  # CSS Compilation ----------------------------
  if [[ ! $NO_CSS ]]; then

    # Plugins Script Run -----------------------
    status "Compiling plugins..."
    if [ -f "$build_dir/plugins/compile" ]; then
      chmod +x $build_dir/plugins/compile
      $build_dir/plugins/compile $build_dir $cache_dir
    fi
    echo "done." | indent

    # LESS -------------------------------------
    if [[ ! $NO_LESS ]]; then
      status "Compiling LESS..."
      ack --less -g $EXCLUDE_DIRS --print0 $build_dir | while read -d $'\0' lessfile
      do
        echo -n "-----> compiling ${lessfile#*$build_dir/}... " | indent
        fname=${lessfile%.*}
        if [[ $NO_SASS ]]; then
          eval lessc $LESS_OPTIONS "$lessfile" > "$fname.css" | indent
        else
          eval lessc $LESS_OPTIONS "$lessfile" > "$fname.scss" | indent
        fi
        echo "done"
      done
      echo "done." | indent

      echo -n "-----> Cleaning LESS... "
      ack --less -g $EXCLUDE_DIRS --print0 $build_dir | xargs -0 rm
      echo "done"
    fi\
    # Stylus -----------------------------------
    if [[ ! $NO_STYLUS ]]; then
      status "Compiling Stylus..."
      ack --stylus -g $EXCLUDE_DIRS --print0 $build_dir | while read -d $'\0' stylfile
      do
        echo "        compiling ${stylfile#*$build_dir/}... " | indent
        eval stylus $STYLUS_OPTIONS "$stylfile" | indent | indent
        echo "        done."
      done
      echo "done." | indent

      echo -n "-----> Cleaning Stylus... "
      ack --stylus -g $EXCLUDE_DIRS --print0 $build_dir | xargs -0 rm
      echo "done"
    fi

    if [[ ! $NO_BLESS ]]; then
       blessc
    fi

    # SASS -------------------------------------
    if [[ ! $NO_SASS ]]; then
      if [[ ! -f "$build_dir/config.rb" ]]; then
        status "Compiling SASS..."
        ack --sass --scss -g $EXCLUDE_DIRS --print0 $build_dir | while read -d $'\0' sassfile
        do
          echo -n "-----> compiling ${sassfile#*$build_dir/}... " | indent
          eval $RUBY_BUILD_DIR/.gem/bin/sass $SASS_OPTIONS --update "$sassfile":"$sassfile" | indent
          echo "done"
        done
        echo "done." | indent
      else
        status "Compiling Compass..."
        eval $PWD/.gem/bin/compass compile $COMPASS_OPTIONS $build_dir | indent
        echo "done." | indent
      fi

      echo -n "-----> Cleaning SASS... "
      ack --sass --scss -g $EXCLUDE_DIRS --print0 $build_dir | xargs -0 rm
      echo "done"
    fi

    # Recess -----------------------------------
    if [[ ! $NO_RECESS ]]; then
      status "Recessing CSS files..."
      ack --css -g $EXCLUDE_DIRS --print0 $build_dir | while read -d $'\0' cssfile
      do
        fname=${cssfile%.*}
        eval recess "$cssfile" $RECESS_LINT_OPTIONS | indent
        eval recess "$cssfile" --compile $RECESS_COMPILE_OPTIONS > "$fname.recess.css"; mv -f "$fname.recess.css" "$cssfile"
      done
      echo "done." | indent
    fi

    # CSS Minification -------------------------
    if [[ ! $NO_CSS_MIN ]]; then
      status "Compressing CSS files..."
      ack --css -g $EXCLUDE_DIRS --print0 $build_dir | while read -d $'\0' cssfile
      do
        echo -n "-----> compressing ${cssfile#*$build_dir/}... " | indent
        fname=${cssfile%.*}
        eval java -jar $bp_dir/vendor/yuicompressor-2.4.7.jar --type css $YUICOMPRESSOR_OPTIONS -o "$fname.min.css" "$cssfile" | indent
        csssha1=`openssl sha1 "$fname.min.css"`
        csssha1=${csssha1#*= }
        csssha1=${csssha1:0:8}
        cp "$fname.min.css" "$fname.$csssha1.css"
        echo "done"
      done
      echo "done." | indent
    fi
  fi

  # JS Compilation -----------------------------
  if [[ ! $NO_JS ]]; then

    # Coffee-Script ----------------------------
    if [[ ! $NO_COFFEE_SCRIPT ]]; then
      # Coffee-Script Import -------------------
      if [[ -f "$build_dir/Cakefile" ]]; then
        echo -n "-----> Making Coffee using Cake..."
        curr_dir=$PWD; cd $build_dir
        eval cake build $CAKE_OPTIONS | indent
        cd $curr_dir; unset curr_dir
        echo "done"
      elif [[ ! $NO_CS_IMPORTER ]]; then
        status "Importing & Compiling coffee-script files..."
        ack --coffee -g $EXCLUDE_DIRS --print0 $build_dir | while read -d $'\0' csfile
        do
          echo -n "-----> applying imports in ${csfile#*$build_dir/}... " | indent
          eval importer $importer_sm_optn $IMPORTER_CS_OPTIONS "$csfile" "${csfile%.*}.js" | indent
          echo "done"
        done
        echo "done." | indent
      else
        echo -n "-----> Making Coffee... "
        ack --coffee -g $EXCLUDE_DIRS --print0 $build_dir | while read -d $'\0' csfile
        do eval coffee $CS_OPTIONS $cs_sm_optn --compile --output "$csfile" "$csfile" | indent; done
        echo "done"
      fi

      # Coffee-Script Clean-up -----------------
      echo -n "-----> Cleaning coffee... "
      ack --coffee -g $EXCLUDE_DIRS --print0 $build_dir | xargs -0 rm
      echo "done"
    fi

    # JS Import --------------------------------
    if [[ ! $NO_JS_IMPORTER ]]; then
      status "Importing JS files..."
      ack --js -g $EXCLUDE_DIRS --print0 $build_dir | while read -d $'\0' jsfile
      do
        echo -n "-----> applying imports in ${jsfile#*$build_dir/}... " | indent
        eval importer $importer_sm_optn $IMPORTER_JS_OPTIONS "$jsfile" "$jsfile" | indent
        echo "done"
      done
      echo "done." | indent
    fi

    # Require.js -------------------------------
    if [[ $REQUIREJS ]]; then
      status "Running Require.js files..."
      eval r.js -o baseUrl=$build_dir $REQUIREJS_OPTIONS
      echo "done." | indent
    fi

    # Closure Compilation ----------------------
    if [[ ! $NO_CLOSURE_COMPILE ]]; then
      # JS Closure compilation -----------------
      status "Compiling JS files..."
      ack --js -g $EXCLUDE_DIRS --print0 $build_dir | while read -d $'\0' jsfile
      do
        echo -n "-----> compiling ${jsfile#*$build_dir/}... " | indent
        fname=${jsfile%.*}
        if [[ ! $NO_SOURCE_MAP ]]; then
          cc_sm_optn="--create_source_map \"$fname.min.map\" --source_map_format=V3"
        fi
        eval java -jar $bp_dir/vendor/compiler.jar --js "$jsfile" --js_output_file "$fname.min.js" $cc_sm_opts $CLOSURE_COMPILE_OPTIONS | indent
        jssha1=`openssl sha1 "$fname.min.js"`
        jssha1=${jssha1#*= }
        jssha1=${jssha1:0:8}
        cp "$fname.min.js" "$fname.$jssha1.js"
        echo "done"
      done
      echo "done." | indent
    fi
  fi

  # HTML Compilation ---------------------------
  if [[ ! $NO_HTML ]]; then
    # Jade -------------------------------------
    if [[ ! $NO_JADE ]]; then
      status "Compiling Jade..."
      ack --jade -g $EXCLUDE_DIRS --print0 $build_dir | while read -d $'\0' jadefile
      do eval jade $JADE_OPTIONS  "$jadefile" | indent; done
      echo "done." | indent

      echo -n "-----> Cleaning Jade... "
      ack --jade -g $EXCLUDE_DIRS --print0 $build_dir | xargs -0 rm
      echo "done"
    fi

    # Haml -------------------------------------\
    if [[ ! $NO_HAML ]]; then
      status "Compiling Haml..."
      ack --haml -g $EXCLUDE_DIRS --print0 $build_dir | while read -d $'\0' hamlfile
      do eval haml $HAML_OPTIONS  "$hamlfile" | indent; done
      echo "done." | indent

      echo -n "-----> Cleaning Haml... "
      ack --haml -g $EXCLUDE_DIRS --print0 $build_dir | xargs -0 rm
      echo "done"
    fi

    # HTML Compression -------------------------
    if [[ ! $NO_HTML_COMPRESSION ]]; then
      status "Compressing HTML..."
      ack --jade -g $EXCLUDE_DIRS --print0 $build_dir | while read -d $'\0' htmlfile
      do
        echo -n "-----> compiling ${htmlfile#*$build_dir/}... " | indent
        eval java -jar $bp_dir/vendor/htmlcompressor-1.5.3.jar $HTML_COMPRESSOR_OPTIONS "$htmlfile" | indent
        echo "done"
      done
      echo "done." | indent
    fi
  fi

fi

# Grunt Tasks --------------------------------
if [[ $USE_GRUNT ]]; then
  cd $build_dir
  eval grunt $GRUNT_OPTIONS
fi

if [[ $USE_STATIC_SERVER ]]; then
  status "Initializing Static Server..."
  STATIC_BUILDPACK_DIR=$(mktemp -d -t node.XXXXXX)
  git clone --quiet https://github.com/abhishekmunie/heroku-buildpack-static.git $STATIC_BUILDPACK_DIR
  chmod -f +x $STATIC_BUILDPACK_DIR/bin/{detect,compile,release} || true
  $STATIC_BUILDPACK_DIR/bin/compile $build_dir $cache_dir
  rm -fr $STATIC_BUILDPACK_DIR
fi

# Cleanup ------------------------------------
rm -fr $NODE_BUILDPACK_DIR
rm -fr $NODE_BUILD_DIR
rm -fr $STATIC_BUILDPACK_DIR

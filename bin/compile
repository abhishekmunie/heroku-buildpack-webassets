#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3

bp_dir=$(cd $(dirname $0); cd ..; pwd)

# clean up leaking environment
unset GIT_DIR

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

source "$build_dir/_webassets.cfg"

# Temporary Directories ------------------------
RUBY_BUILDPACK_DIR=$(mktemp -d -t ruby.XXXXXX)
NODE_BUILDPACK_DIR=$(mktemp -d -t node.XXXXXX)
TMP_BUILD_DIR=$(mktemp -d -t tmp_build.XXXXXX)

# Dependencies Installation --------------------
if [ -f $build_dir/grunt.js ] || [ -f $build_dir/Gruntfile.js ] || [ -f $build_dir/Gruntfile.coffee ]; then
  status "Using existing Gruntfile."
else
  status "Using default Gruntfile."
  mv $bp_dir/vendor/Gruntfile.js $TMP_BUILD_DIR/
fi

if [ -f $TMP_BUILD_DIR/grunt-package.json ]; then
  if [ -f $TMP_BUILD_DIR/package.json ]; then
    mv $TMP_BUILD_DIR/package.json $build_dir/package.json
  fi
  mv $TMP_BUILD_DIR/grunt-package.json $TMP_BUILD_DIR/package.json
fi

if [ ! -f $TMP_BUILD_DIR/package.json ]; then
  mv $bp_dir/vendor/package-webassets.json $TMP_BUILD_DIR/package.json
fi
if [ ! -f $TMP_BUILD_DIR/Gemfile.lock ]; then
  mv $bp_dir/vendor/Gemfile.lock $TMP_BUILD_DIR/
fi

mkdir -p $cache_dir/webassets

# Ruby Installation --------------------------
status "Installing Ruby and gem dependencies..."
git clone --quiet https://github.com/heroku/heroku-buildpack-ruby.git $RUBY_BUILDPACK_DIR
chmod -f +x $RUBY_BUILDPACK_DIR/bin/{detect,compile,release} || true
$RUBY_BUILDPACK_DIR/bin/compile $TMP_BUILD_DIR $cache_dir/webassets
export GEM_HOME=$TMP_BUILD_DIR/vendor/bundle/ruby/2.1.0
export GEM_PATH=$TMP_BUILD_DIR/vendor/bundle/ruby/2.1.0:$GEM_PATH

# Node Installation --------------------------
status "Installing Node and build dependencies..."
git clone --quiet https://github.com/heroku/heroku-buildpack-nodejs.git $NODE_BUILDPACK_DIR
chmod -f +x $NODE_BUILDPACK_DIR/bin/{detect,compile,release} || true
$NODE_BUILDPACK_DIR/bin/compile $TMP_BUILD_DIR $cache_dir/webassets

status "Running Grunt Task heroku..."
curr_dir=$(pwd)
cd $build_dir
PATH=$TMP_BUILD_DIR/vendor/node/bin:$TMP_BUILD_DIR/bin:$TMP_BUILD_DIR/node_modules/.bin:$TMP_BUILD_DIR/bin:$TMP_BUILD_DIR/vendor/bundle/bin:$TMP_BUILD_DIR/vendor/bundle/ruby/2.1.0/bin:$PATH grunt heroku --dest $build_dir | indent
cd $curr_dir

if [[ $USE_STATIC_SERVER ]]; then
  status "Initializing Static Server..."
  STATIC_BUILDPACK_DIR=$(mktemp -d -t node.XXXXXX)
  git clone --quiet https://github.com/abhishekmunie/heroku-buildpack-static.git $STATIC_BUILDPACK_DIR
  chmod -f +x $STATIC_BUILDPACK_DIR/bin/{detect,compile,release} || true
  $STATIC_BUILDPACK_DIR/bin/compile $build_dir $cache_dir/webassets
  rm -fr $STATIC_BUILDPACK_DIR
fi

# Cleanup ------------------------------------
rm -fr $NODE_BUILDPACK_DIR
rm -fr $TMP_BUILD_DIR
rm -fr $STATIC_BUILDPACK_DIR
